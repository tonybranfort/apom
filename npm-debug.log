0 info it worked if it ends with ok
1 verbose cli [ 'C:\\Program Files\\nodejs\\\\node.exe',
1 verbose cli   'C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js',
1 verbose cli   'publish' ]
2 info using npm@2.9.1
3 info using node@v0.12.3
4 verbose node symlink C:\Program Files\nodejs\\node.exe
5 verbose publish [ '.' ]
6 silly cache add args [ '.', null ]
7 verbose cache add spec .
8 silly cache add parsed spec { raw: '.',
8 silly cache add   scope: null,
8 silly cache add   name: null,
8 silly cache add   rawSpec: '.',
8 silly cache add   spec: 'C:\\Users\\Tony\\Google Drive\\dev\\apom',
8 silly cache add   type: 'directory' }
9 verbose addLocalDirectory C:\Users\Tony\AppData\Roaming\npm-cache\apom\1.0.2\package.tgz not in flight; packing
10 verbose tar pack [ 'C:\\Users\\Tony\\AppData\\Roaming\\npm-cache\\apom\\1.0.2\\package.tgz',
10 verbose tar pack   'C:\\Users\\Tony\\Google Drive\\dev\\apom' ]
11 verbose tarball C:\Users\Tony\AppData\Roaming\npm-cache\apom\1.0.2\package.tgz
12 verbose folder C:\Users\Tony\Google Drive\dev\apom
13 info prepublish apom@1.0.2
14 verbose addLocalTarball adding from inside cache C:\Users\Tony\AppData\Roaming\npm-cache\apom\1.0.2\package.tgz
15 silly cache afterAdd apom@1.0.2
16 verbose afterAdd C:\Users\Tony\AppData\Roaming\npm-cache\apom\1.0.2\package\package.json not in flight; writing
17 verbose afterAdd C:\Users\Tony\AppData\Roaming\npm-cache\apom\1.0.2\package\package.json written
18 silly publish { name: 'apom',
18 silly publish   version: '1.0.2',
18 silly publish   description: 'Asynchronous Partial Object Match for object comparisons and filters',
18 silly publish   main: 'lib/index.js',
18 silly publish   scripts: { test: 'make test' },
18 silly publish   repository:
18 silly publish    { type: 'git',
18 silly publish      url: 'git+https://github.com/tonybranfort/apom.git' },
18 silly publish   dependencies: { async: '0.9.x' },
18 silly publish   devDependencies: { mocha: '2.x', should: '7.x', jstat: '1.x', faker: '3.x' },
18 silly publish   keywords: [ 'object', 'compare', 'regex' ],
18 silly publish   author: { name: 'Tony Branfort' },
18 silly publish   license: 'MIT',
18 silly publish   readme: '[![Build Status via Travis CI](https://travis-ci.org/tonybranfort/apom.svg?branch=master)](https://travis-ci.org/tonybranfort/apom)\n[![NPM version](http://img.shields.io/npm/v/apom.svg)](https://www.npmjs.org/package/apom)\n# apom.js\n\nAsynchronous Partial Object Match provides asynchronous functions to determine if chosen properties between javascript objects are equal or \'match\' in defined ways. \n\nInstallable with ```npm install apom```\n\n## Examples\n\nDetermine if properties are equal between 2 objects.\n```javascript\n// test if fido\'s tail color is gray\nvar apom = require(\'apom\');\n\nvar fido ={ \n    paws: {color: \'grey\', count: 3}, \n    tail: {color: \'gray\', count: 1},\n    body: {color: \'black\'},\n    housetrained: true};\n\nvar pObj = {tail: {color: \'gray\'}};\n\napom.matches(pObj, fido, function(doesMatch){\n  console.log(doesMatch);  //true\n})\n```\n\nOr build the match function first for options and better performance. \n\n```javascript\n// test if fido has a gray tail regardless if grey or gray\nvar apom = require(\'apom\');\n\nvar fido ={ \n    paws: {color: \'grey\', count: 3}, \n    tail: {color: \'gray\', count: 1},\n    body: {color: \'black\'},\n    housetrained: true};\n\n// select the properties to be tested and the options\nvar propsToTest = [\'tail.color\']; \nvar options = {regExpMatch:true}; \n\n// include the regular expression in the \'pattern object\'\nvar pObj = {tail:{color: /gr.y/}};  \n\n// create the match function\nvar matchFn = apom.makeMatchFn(propsToTest, options);\n\n// test it\nmatchFn(pObj, fido, function(doesMatch){\n  console.log(doesMatch);  // true\n})\n```\n\nFilter an array of objects:\n```javascript\n// find which pets have 4 paws\n\nvar apom = require(\'apom\');\n\nvar pets = [\n  { name: \'fido\',\n    paws: {color: \'gray\', count: 3}, \n  },\n  { name: \'rover\',\n    paws: {color: \'white\', count: 4}, \n  },\n  ];\n\n// create the pattern object\nvar pObj = {paws:{count: 4}};  \n\n// select properties to test\nvar propsToTest = [\'paws.count\'];\n\n// create the filter function\nvar filter = apom.makeFilterTargetObjectsFn(propsToTest);\n\n// filter\nfilter(pObj, pets, function(matchedPets){\n  console.log(matchedPets);  //matchedPets = {name: \'rover\'...}; \n})\n```\n\n## Documentation\n### Match and Filter Functions\n* [`matches`](#matches) \n* [`makeMatchFn`](#makeMatchFn) returns a custom \n[`matches`](#matches) function\n* [`makeFilterTargetObjectsFn`](#makeFilterTargetObjectsFn) returns a custom\n  [`filterTargetObjects`](#filterTargetObjects) function\n* [`makeFilterPatternObjectsFn`](#makeFilterPatternObjectsFn) returns a custom\n  [`filterPatternObjects`](filterPatternObjects) function\n\n### [Options](#options)\n* [`regExpMatch`](#regExpMatch)\n* [`matchIfPObjPropMissing`](#matchIfPObjPropMissing)\n* [`matchIfTObjPropMissing`](#matchIfPObjPropMissing)\n* [`variablesAllowed`](#variablesAllowed)\n* [`propMatchFn`](#propMatchFn)\n\n<a name="matches"></a>\n### matches(pObj, tObj, callback)\nReturns `true` as result of callback if properties identified to be tested between `pObj` and `tObj` match; otherwise returns `false`.\n\nWhich properties are tested and if they match is determined by whether `matches` is called directly or created via the [`makeMatchFn`](#makeMatchFn). \n\nIf `matches` is created via `makeMatchFn` then the [`propsToTest`](#propsToTest) and [`options`](#options) parameters determine which properties are tested for match and how the properties are tested for match.  Calling the resulting `matches` function created via `makeMatchFn` also provides better performance than calling `matches` directly.\n\nIf `matches` function is called directly without creating it via `makeMatchFn`, every property in the `pObj` object is tested for a match and all `options` values are default.  `Options` cannot be modified if calling `matches` directly.\n\n__Arguments__\n* [`pObj`](#pObj)\n* [`tObj`](#tObj)\n* `callback(result)` - `result` is boolean. `true` if `pObj` matches `tObj` otherwise is `false`. \n\n__Examples__\n```javascript\n// test if fido\'s tail color is gray\nvar apom = require(\'apom\');\n\nvar fido ={ \n    tail: {color: \'gray\', count: 1},\n    body: {color: \'black\'},\n    housetrained: true};\n\nvar pObj = {tail: {color: \'gray\'}};\n\napom.matches(pObj, fido, function(doesMatch){\n  console.log(doesMatch);  //true\n});\n\n// Or, create the matches function to include option \n//      such as regular expression matches. \n\n// select the properties to be tested and the options\nvar propsToTest = [\'tail.color\']; \nvar options = {regExpMatch:true}; \n\n// create the custom match function\nvar matchFn = apom.makeMatchFn(propsToTest, options);\n\n// include the regular expression in the \'pattern object\'\nvar pObj = {tail:{color: /gr.y/}};  \n\n// test it\nmatchFn(pObj, fido, function(doesMatch){\n  console.log(doesMatch);  // true\n})\n\n\n```\n\n<a name="makeMatchFn"></a>\n### makeMatchFn(propsToTest, options)\nCreates and returns a [`matches`](#matches) function that is configured to test the properties included in `propsToTest` and `options` to determine how properties are tested for a match.  This created function will run faster than calling the `matches` function directly and allows for greater control, via `propsToTest` and `options`, of which properties are tested and how.  \n\n__Arguments__\n* [`propsToTest`](#propsToTest)\n* [`options`](#options) - _optional_ Applies to each property in `propsToTest` unless `options` values are included for properties in `propsToTest`.  `options` precedence is (1) `propsToTest` `options` values if set (2) `options` as included here as a parameter, otherwise (3) `options` default values.   \n\n__Examples__\n```javascript\n// test if fido has a gray tail regardless if grey or gray\nvar apom = require(\'apom\');\n\nvar fido ={ tail: {color: \'gray\', count: 1}};\n\n// select the properties to be tested and the options\nvar propsToTest = [\'tail.color\']; \nvar options = {regExpMatch:true}; \n\n// create the match function\nvar matchFn = apom.makeMatchFn(propsToTest, options);\n\n// include the regular expression in the \'pattern object\'\nvar pObj = {tail:{color: /gr.y/}};  \n\n// test it\nmatchFn(pObj, fido, function(doesMatch){\n  console.log(doesMatch);  // true\n});\n```\n\nIt would give the same result to set the `options` in `propsToTest`\n```javascript\nvar propsToTest = {\'tail.color\':{regExpMatch:true}}; \n\nvar matchFn = apom.makeMatchFn(propsToTest);  // options not included here\n\nmatchFn(pObj, fido, function(doesMatch){\n  console.log(doesMatch);  // true\n});\n\n```\n\n<a name="makeFilterTargetObjectsFn"></a>\n### makeFilterTargetObjectsFn(propsToTest, options)\nCreates and returns a [`filterTargetObjects`](#filterTargetObjects) function that is configured to test the properties included in `propsToTest` using `options` to determine how properties are tested for a match between `pObj` and `tObjs`.\n\n__Arguments__\n* [`propsToTest`](#propsToTest)\n* [`options`](#options) _optional_ Applies to each property in `propsToTest` unless `options` values are included for properties in `propsToTest`.  `options` precedence is (1) `propsToTest` `options` values if set (2) `options` as included here as a parameter, otherwise (3) `options` default values. \n\n__Examples__\nSee `filterTargetObjects`.\n\n<a name="filterTargetObjects"></a>\n### filterTargetObjects(pObj, tObjs, callback)\nReturns an array of `tObjs` that match the `pObj`\n based on the `propsToTest` and `options` parameters that were used to create this function with `makeFilterTargetObjectsFn`. \n\nThis function is created by calling [`makeFilterTargetObjectsFn`](#makeFilterTargetObjectsFn). \n\n__Arguments__\n* [`pObj`](#pObj)\n* `tObjs` - An array of [`tObj`](#tObj) objects\n* `callback(result)` - `result` is an array of `tObj` objects that match `pObj`. \n\n__Examples__\n```javascript\n// find which pets have gray paws regardeless if \'gray\' or \'grey\'\n\nvar apom = require(\'apom\');\n\nvar pets = [\n  { name: \'fido\',\n    paws: {color: \'gray\', count: 3}, \n  },\n  { name: \'rover\',\n    paws: {color: \'white\', count: 4}, \n  },\n  ];\n\n// create the pattern object\nvar pObj = {paws:{color: /gr[a,e]y/}};  \n\n// select properties and options to test\nvar propsToTest = [\'paws.color\'];\nvar options = {regExpMatch: true}; \n\n// create the filter function\nvar filter = apom.makeFilterTargetObjectsFn(propsToTest, options);\n\n// filter\nfilter(pObj, pets, function(matchedPets){\n  console.log(matchedPets);  \n  // [ { name: \'fido\', paws: { color: \'gray\', count: 3 } } ] \n});\n```\n\n\n<a name="makeFilterPatternObjectsFn"></a>\n### makeFilterPatternObjectsFn(propsToTest, options)\nCreates and returns a [`filterPatternObjects`](#filterPatternObjects) function that is configured to test the properties included in `propsToTest` using `options` to determine how properties are tested for a match between `pObjs` and `tObj`.\n\n__Arguments__\n* [`propsToTest`](#propsToTest)\n* [`options`](#options) - _optional_ Applies to each property in `propsToTest` unless `options` values are included for properties in `propsToTest`.  `options` precedence is (1) `propsToTest` `options` values if set (2) `options` as included here as a parameter, otherwise (3) `options` default values. \n\n__Examples__\nSee `filterPatternObjects`.\n\n<a name="filterPatternObjects"></a>\n### filterPatternObjects(pObjs, tObj, callback)\nReturns an array of `pObjs` that match the `tObj`based on the `propsToTest` and `options` parameters that were used to create this function with `makeFilterPatternObjectsFn`. \n\nThis function is created by calling [`makeFilterPatternObjectsFn`](#makeFilterPatternObjectsFn). \n\n`filterPatternObjects` allows an array of objects with regular expressions to be filtered on those regular expressions unlike `filterTargetObjects`. \n\n__Arguments__\n* `pObjs` - An array of [`pObj`](#pObj) objects\n* [`tObj`](#tObj)\n* `callback(result)` - `result` is an array of `pObj` objects that match `tObj`. \n\n__Examples__\n```javascript\n// find which pets match a request with a role of guarddog\n\nvar apom = require(\'apom\');\n\n// pets are the `pObjs` in this case to match on their regular expressions\nvar pets = [\n  {name: \'growler\',\n   path: /.*role=guarddog.*/},\n  {name: \'fido\',\n   path: /.*role=pet.*/},\n]\n\n// request is the tObj \nvar request = {path: \'/pets?role=guarddog\'}\n\n// select properties and options to test\nvar propsToTest = [\'path\'];\nvar options = {regExpMatch: true}; \n\n// create the filter function\nvar filter = apom.makeFilterPatternObjectsFn(propsToTest, options);\n\n// filter\nfilter(pets, request, function(matchedPets){\n  console.log(matchedPets);  \n  // [ { name: \'growler\', path: /.*role=guarddog.*/ } ]\n});\n\n```\n\n<a name="pObj" />\n### pObj \n__"pattern object"__.  Any object that is passed into a [`matches`](#matches), [`filterPatternObjects`](#filterPatternObjects) or [`filterTargetObjects`](#filterTargetObjects) function as the first parameter.  It is used to test if it matches the [target object](#tObj)(`tObj`). Considered a \'pattern\' object because, unlike the `tObj`, it has characteristics such as : \n* If [`regExpMatch`](#regExpMatch) is true, property/ies in pObj are tested as regular expressions against respective `tObj` property/ies.\n* If [`variablesAllowed`](#variablesAllowed) is true, strings in the pObj property values can be replaced as variable names with variable values.  \n\n\n```javascript\nvar apom = require(\'apom\');\n\n// the target object here is fido\nvar fido ={ \n    paws: {color: \'grey\', count: 3}, \n    tail: {color: \'gray\', count: 1},\n    body: {color: \'black\'},\n    housetrained: true};\n\n// the pattern object\nvar pObj = {tail: {color: \'gray\'}};\n\napom.matches(pObj, fido, function(doesMatch){\n  console.log(doesMatch);  //true\n})\n```\n\n<a name="tObj" />\n### tObj \n__"target object"__.  Any object that is passed into a [`matches`](#matches), [`filterPatternObjects`](#filterPatternObjects) or [`filterTargetObjects`](#filterTargetObjects) function as the second parameter.  The target object is the object that is being tested against the pattern object to determine if it matches.  See notes and example  under [`pObj`](#pObj). \n\n<a name="propsToTest" />\n### propsToTest \nAn array or object that contains property names and their assigned [`options`](#options) values, if any.  Property names are strings and are in dot notation if nested; eg "tail.color" to identify the property in `{tail: {color: black}}`. \n\nCan take one of the following forms: \n* an array of strings which are the property names to be tested.  `options` values cannot be specified for individual properties with this form.  Example: \n  ```javascript\n\n  [\'name\', \'tail.color\', \'housetrained\']\n  ```\n\n* an array of objects, one for each property to be tested, each containing a \'name\' property assigned to the property name to be tested, and option property key/values (optional). Example: \n  ```javascript\n  // test using default options for housetrained; tail.color using reg exp match\n  [{name: \'housetrained\'}, {name: \'tail.color\', regExpMatch: true}]\n  ```\n\n* an array of combination of the above 2 (strings and objects). Example: \n  ```javascript\n  [\'housetrained\', {name: \'tail.color\', regExpMatch: true}]\n  ```\n\n* an object with property names as keys and `options` objects as the values. Example: \n  ```javascript\n  // test using default options for housetrained; tail.color using reg exp match\n  {\'housetrained\':{}, \'tail.color\': {regExpMatch: true}}\n  ```\n\n<a name="options" />\n### options\nAn object used to set the option values for match and filter functions.  \n\n```javascript\n//options properties & their default values\nvar options = {\n  regExpMatch: false,        // match on regular expression in `pObj` \n  regExpIgnoreCase: false,   // ignore case on reg exp match (str only) \n  regExpAnchorStart: false,  // append "^" to beg of str for reg exp (str only)\n  regExpAnchorEnd: false,    // append "$" to end of str for reg exp (str only)\n\n  matchIfPObjPropMissing: false,  // matches if `pObj` property doesn\'t exist\n  matchIfTObjPropMissing: false,  // matches if `tObj` property doesn\'t exist\n\n  variablesAllowed: false,  // replace var names with var values in `pObj` props \n  getVariables: undefined,  // function to call to get object of var names/vals\n  variablesStartStr: \'~\',   // beg str in pObj prop value to find the var name  \n  variablesEndStr: null,    // end str in pObj prop value to find the var name\n\n  propMatchFn: null         // function to call instead of std match function\n}; \n```\n\n##### <a name="regExpMatch" />regExpMatch\nProperty on the [`options`](#options) object that if equal to `true`, apom filter and matches functions will use the `pObj` property value as a regular expression to test against the `tObj` property.  If the pattern object property value is a string, the string will be converted to a javascript regular expression.  \n  - valid values: `true`,`false`\n  - default: `false`\n\nExample: \n```javascript\n// test if fido has a gray tail regardless if grey or gray\nvar apom = require(\'apom\');\n\nvar fido ={ \n    paws: {color: \'grey\', count: 3}, \n    tail: {color: \'gray\', count: 1},\n    body: {color: \'black\'},\n    housetrained: true};\n\n// select the properties to be tested and the options\nvar propsToTest = [\'tail.color\']; \nvar options = {regExpMatch:true}; \n\n// include the regular expression in the \'pattern object\'\nvar pObj = {tail:{color: /gr[a,e]y/}};  \n\n// create the match function\nvar matchFn = apom.makeMatchFn(propsToTest, options);\n\n// test it\nmatchFn(pObj, fido, function(doesMatch){\n  console.log(doesMatch);  // true\n});\n```\n\n##### <a name="regExpIgnoreCase" />regExpIgnoreCase\nProperty on the [`options`](#options) object that if equal to `true` __and__ [`regExpMatch`](#regExpMatch)===`true` __and__ the `pObj` property value is a string, then when the `pObj` value is converted from a string to a regular expression object in apom matches and filter functions,  the regular expression is included with the \'i\' flag to ignore case on the regular expression match.  This option value is only considered where the `pObj` property value is a string.  If the `pObj` value is a regular expression object, then the ignore case flag can be included on that object; eg "/gray/i".   \n  - valid values: `true`,`false`\n  - default: `false`\n\nExample: \n```javascript\n// test if fido has a gray tail regardless if grey or Gray\nvar apom = require(\'apom\');\n\nvar fido ={ \n    paws: {color: \'grey\', count: 3}, \n    tail: {color: \'Gray\', count: 1},\n    body: {color: \'black\'},\n    housetrained: true};\n\n// select the properties to be tested and the options\nvar propsToTest = [\'tail.color\']; \nvar options = {regExpMatch:true, regExpIgnoreCase: true}; \n\n// include the regular expression as a string in the pattern object\nvar pObj = {tail:{color: \'gr[a,e]y\'}};  \n\n// create the match function\nvar matchFn = apom.makeMatchFn(propsToTest, options);\n\n// test it\nmatchFn(pObj, fido, function(doesMatch){\n  console.log(doesMatch);  // true\n});\n```\n\n// regExpIgnoreCase does not apply if pObj property is a regular expression\n```javascript\nvar pObj = {tail:{color: /gr[a,e]y/}};  \n\nmatchFn(pObj, fido, function(doesMatch){\n  console.log(doesMatch);  // false\n});\n\n// use the \'i\' flag on the regular expression object instead \nvar pObj = {tail:{color: /gr[a,e]y/i}};  \n\nmatchFn(pObj, fido, function(doesMatch){\n  console.log(doesMatch);  // true\n});\n```\n\n##### <a name="regExpAnchorStart" />regExpAnchorStart\nProperty on the [`options`](#options) object that if equal to `true` __and__ [`regExpMatch`](#regExpMatch)===`true` __and__ the `pObj` property value is a string, then when the `pObj` value is converted from a string to a regular expression object in apom matches and filter functions, it includes a \'^\' prepended to `pObj` string value.  This option value is only considered where the `pObj` is a string.  If the `pObj` property value is a regular expression object, then the ^ can be included in the regular expression; eg, /^gray/.  \n  - valid values: `true`,`false`\n  - default: `false`\n\n  This option will rarely (ever?) be needed as this can also be achieved with a `pObj` value that is a string by simply including the ^ in the string (without setting `regExpAnchorStart`=true). \n\n  These 3 would yield the same result: \n\n  ```javascript \nvar pObj = {tail: {color: \'^gray\'}}\nvar options = {regExpMatch: true}\n```\n  ```javascript \nvar pObj = {tail: {color: \'gray\'}}\nvar options = {regExpMatch: true, regExpAnchorStart: true}\n```\n  ```javascript \nvar pObj = {tail: {color: /^gray/}}\nvar options = {regExpMatch: true}\n```\n\n##### <a name="regExpAnchorEnd" />regExpAnchorEnd\nProperty on the [`options`](#options) object that if equal to `true` __and__ [`regExpMatch`](#regExpMatch)===`true` __and__ the `pObj` property value is a string, then when the `pObj` value is converted from a string to a regular expression object in apom matches and filter functions, it includes a \'$\' appended to the end of the `pObj` string value.  This option value is only considered where the `pObj` is a string.  If the `pObj` property value is a regular expression object, then the $ can be included in the regular expression; eg, /gray$/.  \n  - valid values: `true`,`false`\n  - default: `false`\n\n  This option will rarely (ever?) be needed as this can also be achieved with a `pObj` value that is a string by simply including the $ in the string (without setting `regExpAnchorEnd`=true).  \n\n  These 3 would yield the same result: \n\n  ```javascript \nvar pObj = {tail: {color: \'gray$\'}}\nvar options = {regExpMatch: true}\n```\n  ```javascript \nvar pObj = {tail: {color: \'gray\'}}\nvar options = {regExpMatch: true, regExpAnchorEnd: true}\n```\n  ```javascript \nvar pObj = {tail: {color: /gray$/}}\nvar options = {regExpMatch: true}\n```\n\n\n##### <a name="matchIfTObjPropMissing" />matchIfTObjPropMissing\nProperty on the [`options`](#options) object that if equal to `true`, apom filter and matches functions will return `true` for the given property\'s match test if the property being tested does not exist on `tObj`. \n  - valid values: `true`,`false`\n  - default: `false`\n\nExample: \n```javascript\n// find which pets have a role of guarddog and (the breed is chihuahua or \n//     breed is not defined)  \n\nvar apom = require(\'apom\');\n\nvar pets = [\n  {name: \'growler\',\n   breed: \'chihuahua\',\n   role: \'guarddog\'},\n  {name: \'fido\',\n   breed: \'lab\',\n   role: \'pet\'},\n  {name: \'duchy\',\n   role: \'guarddog\'},\n  {name: \'bruiser\',\n   breed: \'chihuahua\',\n   role: \'cuddler\'},\n]\n\n// request is the tObj \nvar pObj = {role:\'guarddog\', breed: \'chihuahua\'};\n\n// select properties to test; role with default options\nvar propsToTest = \n    {role: {}, breed: {matchIfTObjPropMissing: true}};\n\n// create the filter function\nvar filter = apom.makeFilterTargetObjectsFn(propsToTest);\n\n// filter\nfilter(pObj, pets, function(matchedPets){\n  console.log(matchedPets);  \n  // [ { name: \'growler\'...},{name: \'duchy\'...} ]\n});\n\n```\n\n##### <a name="matchIfPObjPropMissing" />matchIfPObjPropMissing\nProperty on the [`options`](#options) object that if equal to `true`, apom filter and matches functions will return `true`for the given property\'s match test if the property being tested does not exist on `pObj`. \n  - valid values: `true`,`false`\n  - default: `false`\n\nExample: \n\nThis option would typically be used in a `makeFilterPatternObjectsFn`, like this example, but like all options can also be used in `makeFilterPatternObjectsFn` and `matches`.  \n\n```javascript\n// find which pets match a request with a role of guarddog and \n//     (the breed is chihuahua or breed is not defined)  \n\nvar apom = require(\'apom\');\n\n// pets are the `pObjs` in this case to match on their regular expressions\nvar pets = [\n  {name: \'growler\',\n   breed: \'chihuahua\',\n   path: /.*role=guarddog.*/},\n  {name: \'fido\',\n   breed: \'lab\',\n   path: /.*role=pet.*/},\n  {name: \'duchy\',\n   path: /.*role=guarddog.*/},\n  {name: \'bruiser\',\n   breed: \'chihuahua\',\n   path: /.*role=cuddler.*/},\n]\n\n// request is the tObj \nvar request = {path: \'/pets?role=guarddog\', breed: \'chihuahua\'}\n\n// select properties and options to test\nvar propsToTest = \n    {path: {regExpMatch: true}, breed: {matchIfPObjPropMissing: true}};\n\n// create the filter function\nvar filter = apom.makeFilterPatternObjectsFn(propsToTest);\n\n// filter\nfilter(pets, request, function(matchedPets){\n  console.log(matchedPets);  \n  // [ { name: \'growler\'...},{name: \'duchy\'...} ]\n});\n\n```\n\n\n##### <a name="variablesAllowed" />variablesAllowed\nProperty on the [`options`](#options) object that if equal to `true`, replaces strings that are recognized as variable names in `pObj` property values with their respective variable values from [`getVariables`](#getVariables).  The varible names on the `pObj` property values is matched based on the [`variablesStartStr`](#variablesStartStr) and [`variablesEndStr`](#variablesStartStr). \n  - valid values: `true`,`false`\n  - default: `false`\n\nExample: \n```javascript\n// match if fido has a grey tail and paws regardless if grey or gray\n\nvar apom = require(\'apom\');\n\nvar fido ={ \n    paws: {color: \'grey\', count: 3}, \n    tail: {color: \'gray\', count: 1},\n    body: {color: \'black\'},\n    housetrained: true};\n\nvar options =  \n    {regExpMatch: true,\n     variablesAllowed:true,\n     variablesStartStr:"~",\n     variablesEndStr: "#",\n     getVariables:  function(cb) {\n       return cb(null, {grayColor: /gr[a,e]y/}); \n    }};\n\n// variable name is identified between variablesStartStr(~) and variablesEndStr(#)\n//   and replaced with that name from getVariables (grayColor => /gr[a,e]y/)\nvar pObj = {paws:{color: \'~grayColor#\'},tail:{color:\'~grayColor#\'}};  \n\nvar propsToTest = [\'paws.color\', \'tail.color\'];\n\nvar matchFn = apom.makeMatchFn(propsToTest, options);\n\nmatchFn(pObj, fido, function(matches){\n  console.log(matches); //true \n  return; \n});\n```\n\n##### <a name="getVariables" />getVariables\nProperty on the [`options`](#options) object that defines a function which, if [`variablesAllowed`](#variablesAllowed) is `true`, takes a callback which is called with an error (null if no error) and an object of the form : \n\n```javascript\n{variable1Name: `variable1Value`,\n  variable2Name: `variable2Value`}\n```\n\nSee [`variablesAllowed`](#variablesAllowed) for an example.\n\n##### <a name="variablesStartStr" />variablesStartStr\nProperty on the [`options`](#options) object that defines a string which, if [`variablesAllowed`](#variablesAllowed) === `true`, determines the starting position of a variable name string in a `pObj` property value that will be replaced with the variable value string of the respective variable name obtained from [`getVariables`](#getVariables). \n\nSee [`variablesAllowed`](#variablesAllowed) for an example.\n\n\n##### <a name="variablesEndStr" />variablesEndStr\nProperty on the [`options`](#options) object that defines a string which, if [`variablesAllowed`](#variablesAllowed) === `true`, determines the ending position of a variable name string in a `pObj` property value that will be replaced with the variable value string of the respective variable name obtained from [`getVariables`](#getVariables). \n\nSee [`variablesAllowed`](#variablesAllowed) for an example.\n\n\n\n##### <a name="propMatchFn" />propMatchFn\nProperty on the [`options`](#options) object that defines a function to replace the match function between `pObj` and `tObj` properties.   \n  - default: `null`\n\nFunction is called with 3 parameters for each property being tested: \n* `pObjProp` - an object-literal with these 2 properties: \n    - `value`: the value of the [`pObj`](#pObj) property value\n    - `exists`: `true` or `false` depending on whether the property exists on `pObj` \n* `tObjProp` - an object-literal with these 2 properties: \n    - `value`: the value of the [`tObj`](#tObj) property value\n    - `exists`: `true` or `false` depending on whether the property exists on `tObj` \n* callback(`true`|`false`) - The callback that contains your defined expression to return `true` or `false`.  \n\nExample: \n```javascript\n// find pets with 3 or more paws\n\nvar apom = require(\'apom\');\n\nvar pets = [\n  { name: \'fido\',\n    paws: {color: \'gray\', count: 3}},\n  { name: \'rover\',\n    paws: {color: \'white\', count: 4}},\n  { name: \'slither\',\n    paws: {count: 0}},\n  ];\n\nvar pObj = {paws:{count: 3}};  \n\n//   propMatchFn is called for each property with the \n//      pattern object property value and the target object property value \nvar matchFn = function(pObjProp, tObjProp, cb) {\n  var hasAtLeast3Paws = tObjProp.exists === true && \n      pObjProp.exists === true && \n      tObjProp.value >= pObjProp.value;\n  return cb(hasAtLeast3Paws);  \n}; \n\nvar propsToTest = {\'paws.count\': {propMatchFn: matchFn}}; \n\nvar filter = apom.makeFilterTargetObjectsFn(propsToTest);\n\nfilter(pObj, pets, function(matchedPets){\n  console.log(matchedPets);\n  //matchedPets = {name: \'fido\'..., name:\'rover\'...}; \n});\n\n```\n\n\n\n\n',
18 silly publish   readmeFilename: 'README.md',
18 silly publish   gitHead: '93177fc50373b3ceb6f86aa38161f175d81d1347',
18 silly publish   bugs: { url: 'https://github.com/tonybranfort/apom/issues' },
18 silly publish   homepage: 'https://github.com/tonybranfort/apom#readme',
18 silly publish   _id: 'apom@1.0.2',
18 silly publish   _shasum: 'f3824f5a82fdf32566633966f3aad16c3b71cdde',
18 silly publish   _from: '.' }
19 verbose getPublishConfig undefined
20 silly mapToRegistry name apom
21 silly mapToRegistry using default registry
22 silly mapToRegistry registry https://registry.npmjs.org/
23 silly mapToRegistry uri https://registry.npmjs.org/apom
24 verbose publish registryBase https://registry.npmjs.org/
25 silly publish uploading C:\Users\Tony\AppData\Roaming\npm-cache\apom\1.0.2\package.tgz
26 verbose request uri https://registry.npmjs.org/apom
27 verbose request sending authorization for write operation
28 info attempt registry request try #1 at 9:16:31 AM
29 verbose request using bearer token for auth
30 verbose request id 4cd9453511cc2f87
31 http request PUT https://registry.npmjs.org/apom
32 http 403 https://registry.npmjs.org/apom
33 verbose headers { 'content-type': 'application/json',
33 verbose headers   'cache-control': 'max-age=300',
33 verbose headers   'content-length': '95',
33 verbose headers   'accept-ranges': 'bytes',
33 verbose headers   date: 'Wed, 13 Jan 2016 15:16:36 GMT',
33 verbose headers   via: '1.1 varnish',
33 verbose headers   connection: 'keep-alive',
33 verbose headers   'x-served-by': 'cache-ord1732-ORD',
33 verbose headers   'x-cache': 'MISS',
33 verbose headers   'x-cache-hits': '0',
33 verbose headers   'x-timer': 'S1452698194.191843,VS0,VE2719' }
34 verbose request invalidating C:\Users\Tony\AppData\Roaming\npm-cache\registry.npmjs.org\apom on PUT
35 error publish Failed PUT 403
36 verbose stack Error: "You cannot publish over the previously published version 1.0.2." : apom
36 verbose stack     at CachingRegistryClient.<anonymous> (C:\Program Files\nodejs\node_modules\npm\node_modules\npm-registry-client\lib\request.js:247:14)
36 verbose stack     at Request._callback (C:\Program Files\nodejs\node_modules\npm\node_modules\npm-registry-client\lib\request.js:170:14)
36 verbose stack     at Request.self.callback (C:\Program Files\nodejs\node_modules\npm\node_modules\request\request.js:368:22)
36 verbose stack     at Request.emit (events.js:110:17)
36 verbose stack     at Request.<anonymous> (C:\Program Files\nodejs\node_modules\npm\node_modules\request\request.js:1219:14)
36 verbose stack     at Request.emit (events.js:129:20)
36 verbose stack     at IncomingMessage.<anonymous> (C:\Program Files\nodejs\node_modules\npm\node_modules\request\request.js:1167:12)
36 verbose stack     at IncomingMessage.emit (events.js:129:20)
36 verbose stack     at _stream_readable.js:908:16
36 verbose stack     at process._tickCallback (node.js:355:11)
37 verbose statusCode 403
38 verbose pkgid apom
39 verbose cwd C:\Users\Tony\Google Drive\dev\apom
40 error Windows_NT 6.3.9600
41 error argv "C:\\Program Files\\nodejs\\\\node.exe" "C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js" "publish"
42 error node v0.12.3
43 error npm  v2.9.1
44 error code E403
45 error "You cannot publish over the previously published version 1.0.2." : apom
46 error If you need help, you may report this error at:
46 error     <https://github.com/npm/npm/issues>
47 verbose exit [ 1, true ]
